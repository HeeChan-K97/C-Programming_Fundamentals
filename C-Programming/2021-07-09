Chapter 8.조건에 따른 흐름의 분기

if문:if문은 독립적으로 사용되어 '조건적 실행'을 가능하게 한다.
예)
if(num1>num2)
{
  printf("num1이 num2보다 큽니다. \n");
  printf("%d > %d \n", num1, num2);
}

** 조건이 만족될 때 실행할 문장이 하나라면 중괄호는 생략이 가능하다.
------------------------------------------------------------------------------------------------------------------------------
if~else문: if와 else가 만나서 이루는 문장의 수는 둘이 아니라 하나다.

예)
if(조건1)
{
  //조건 1 만족 시 실행
}
else if(조건2)
{
  //조건 2 만족 시 실행
}
else if(조건3)
{
  //조건 3 만족 시 실행
}
else
{
  //모든 조건이 불만족 시에 실행된다
}

** 조건의 만족여부 검사는 위에서 아래로 진행이 된다.
** 조건이 만족되어서 해당 블록을 실행하고 나면 마지막 else까지도 건너뛴다.
** if...else if...else는 if~else문을 중첩시키되 else블록을 대상으로 중첩시킨 결과이다.

<조건 연산자: 피 연산자가 세 개인 '삼 항 연산자'>
int num3 = (num1 > num2) ? (num1) : (num2);
num1이 num2보다 큰가? '참'이면 num3는 num1 '거짓'이면 num3가 num2가 된다.
------------------------------------------------------------------------------------------------------------------------------
반복문의 생략과 탈출: continue & break

break;    //break문을 가장 가까이서 감싸고 있는 반복문 하나를 빠져 나오게 된다.
continue;   //반복문 안에서 어떤 문장을 싱행하게 되면, 실행중인 위치에 상관없이 반복문의 조건검사 위치로 이동을 한다.
              그리고 검사결과 반복족건이 여전히 '참'이라면 반복영역을 다시 실행하게 된다.
------------------------------------------------------------------------------------------------------------------------------
switch문: 
switch(n)
{
    case 1:
      break;
      
    case 2:
      break;
      
    case 3:
      break;
      
    case n:
      break;
      .
      .
      .
    default:
}
//세미콜른과 콜른을 잘 구분해서 작성한다. n에 저장된 값에 따라서 실행할 영역이 결정된다.
//case문은 통칭, label.
//break문이 없다면 존재하는 모든 레이블을 실행하므로 break문을 포함시킨다. 하지만 break문은 선택적이기 때문에 삽입되어서 유용한 경우와
  그렇지 않은 경우를 구분하여 사용한다.


<switch VS if...else>
** 분기의 경우 수가 많아지면 가급적으로 switch문을 사용
** switch문으로 표현하기 어려운/애매한 상황에서는 if문을 사용
------------------------------------------------------------------------------------------------------------------------------

goto문:프로그램의 흐름을 원하는 위치로 이동시킬 때 사용하는 키워드.
예)
int main(void)
{
    . . . .
  rabbit:   //위치지정에 사용된 rabbit이라는 이름의 레이블
    . . . .
    goto rabbit:    //레이블 rabbit의 위치로 이동!
    . . . .
}

