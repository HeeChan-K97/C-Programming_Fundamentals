<반환형의 유무와 매개변수의 유무에 따라서 구분할 수 있는 함수의 유형과 정리.>

#include <stdio.h>

int Add(int num1, int num2)   //인자전달, 반환값(O) //참고로 Add의 함수선언은 이렇게 표시 될 수 있다. int Add(int, int);
{
    return num1+num2;
}

void ShowAddResult(int num)   //인자전달(O)
{
    printf("덧셈결과 출력: %d \n", num);
}

int ReadNum(void)   //반환 값(O)
{
    int num;
    scanf("%d", &num);
    return num;
}

void HowToUsedThisProg(void)    //  인자전환, 반환 값(X)
{
    printf("두 개의 정수를 입력하시면 덧셈결과가 출력됩니다. \n");
    printf("자! 그럼 두 개의 정수를 입력하세요. \n");
}

int main(void)
{
    int result, num1, num2;
    HowToUseThisProg();
    num1=ReadNum();
    num2=ReadNum();
    result = Add(num1, num2);
    ShowAddResult(result);
    return 0;
}    


실행결과:
두 개의 정수를 입력하시면 덧셈결과가 출력됩니다.
자! 그럼 두 개의 정수를 입력하세요.
12 24
덧셈결과 출력: 36
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
함수의 정의와 그에 따른 원형의 선언

함수는 호출되기 전에 미리 정의되어야 한다. 하지만 아래의 방법을 사용하여 메인 선언문 이후의 코드에 반환문이 나올 것임을 알려서 컴파일이 가능하게 할 수 있다.

int Increment(int n);

int main(int n)
{
        int num=2;
        num=Increment(num);
        return 0;
}

int Increment(int n)
{
        n++;
        return n;
}
 이로써 메인 함수에서 호출하는 Increment 함수의 정의가 메인 함수의 뒤에 올 수 있게 되었다. 참고로 함수의 선언에는 매개변수의 갯수 및 자료형 정보만 포함되면 되기 때문에
 다음과 같이 매개변수의 이름을 생략해서 선언 가능하다.
 
 int Increment(int);
 ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 
