Chapter 14: 포인터와 함수에 대한 이해

<인자전달의 기본방식은 값의 복사이다>
함수호출시 전달되는 인자의 값은 매개변수에 복사가 된다.

배열을 통째로 넘겨받으려면 매개변수로 배열을 선언할 수 있어야 한다. 하지만 이것이 허용되지 않으니 배열을 통째로 넘기는 것은 불가능한 일이다.
대신에 함수 내에서 배열에 접근할 수 있도록 배열의 주소 값을 전달하는 것은 가능하다.

어떤 함수의 매개변수를 int 형 포인터 변수로 선언하는 방법

void SimpleFunc(int * param){. . . .}

위와 같은 매개변수 param을 이용해서 배열에 접근하는 방법

printf("%d %d", param[1], param[2]);
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<ShowArayElem 함수 내에서 외부에 선언된 배열에 접근하여 그 값을 출력하는 방법>
ArrayParam.c

#include <stdio.h>

void ShowArayElem(int * param, int len)
{
  int i;
  for(i=0; int<len; i++)
    printf("%d ", param[i]);
  printf("\n");
}

int main(void)
{
  int arr1[3]={1, 2, 3};
  int arr2[5]={4, 5, 6, 7, 8};
  ShowArayElem(arr1, sizeof(arr1) / sizeof(int));
  ShowArayElem(arr2, sizeof(arr2) / sizeof(int));
  return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<ShowArayElem 함수 내에서 외부에 선언된 배열에 접근하여 그 값을 변경하는 방법>---
#include <stdio.h>

void ShowArayElem(int * param, int len)
{
  int i;
  for(i=0; int<len; i++)
    printf("%d ", param[i]);
  printf("\n");
}

void AddArayElem(int * param, int len, int add)
{
  int i;
  for(i=0; i<len; i++)
      param[i] += add;
}

int main(void)
{
  int arr[3]={1, 2, 3};
  AddArayElem(arr, sizeof(arr) / sizeof(int), 1);
  ShowArayElem(arr, sizeof(arr) / sizeof(int));
  
  
  AddArayElem(arr, sizeof(arr) / sizeof(int), 2);
  ShowArayElem(arr, sizeof(arr) / sizeof(int));
  
  AddArayElem(arr, sizeof(arr) / sizeof(int), 3);
  ShowArayElem(arr, sizeof(arr) / sizeof(int));
  return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<CallByValueSwap.c>
#include <stdio.h>

void Swap(int n1, int n2)
{
    int temp=n1;
    n1=n2;
    n2=temp;
    printf("n1 n2: %d %d \n", n1, n2);
}

int main(void)
{
    int num1=10;
    int num2=20;
    printf("num1 num2: %d %d \n", num1, num2);
    
    Swap(num1, num2);
    printf("num1 num2: %d %d \n", num1, num2);
    return 0;
}

//temp 값에 n1을 넣어주고 n1=n2로 n1의 값을 n1로 넣어준후, 전에 넣어두었던 temp값을 n2에 넣어주었다.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<CallByRefSwap.c>
#include <stdio.h>

void Swap(int * ptr1, int * ptr2)
{
  int temp = *ptr1;
  *ptr1 = *ptr2;
  *ptr2 = temp;
}

int main(void)
{
    int num1=10;
    int num2=20;
    printf("num1 num2: %d %d \n", num1, num2);
    
    Swap(&num1, &num2);
    printf("num1 num2: %d %d \n", num1, num2);
    return 0;
}

//Swap함수의 매개변수인 ptr1과 ptr2는 각각 num1과 num2를 가리키는 상황이 된다. 따라서 *ptr1은 num1을 의미하게 되고, *ptr2는 num2를 의미하게 된다.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<scanf 함수호출 시 & 연산자를 붙이는 이유>

int main(void)
{
  int num;
  scanf("%d", &num);    //변수 num의 주소 값을 scanf 함수에 전달
  . . . .
}
//위의 scanf 함수호출이 완료되면 변수 num에는 값이 채워진다. 즉 프로그램 사용자로부터 값을 입력 받아서 변수 num에 그 값을 채우는 일을
  scanf 함수가 하는 것이다. 그리고 이를 위해서 scanf 함수는 변수 num의 주소 값을 알아야 한다. 그래여 변수 num에 접근을 해서 값을 채워
  넣을 수 있기 때문이다.
  
<문자열을 입력 받을 때에는 &연산자를 붙이지 않는 이유>  
int main(void)
{
  char str[30];
  scanf("%s", str);
  . . . .
}
  
// str은 그 자체로 배열의 주소 값이다. 그냥 str을 전달하면 배열의 주소 값이 전달되지 않는가! 따라서 & 연산자를 붙일 이유가 없는 것이다.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
<포인터 변수가 참조하는 대상의 변경을 허용하지 않는 const 선언>

int main(void)
{
    int num=20;
    const int * ptr=&num;
    num=40;
    . . . .
}
//포인터 변수 ptr을 이용해서 ptr이 가리키는 변수에 저장된 값을 변경하는 것을 허용하지 않겠다!
  위의 const 선언은 값을 변경하는 방법에 제한을 두는 것이지 무엇인가를 상수로 만드는 선언은 아니다.
  
<포인터 변수의 상수화>
int * const ptr = &num;
//이렇게 되면 ptr은 상수가 된다 하지만 그렇다고 해서 ptr이 가리키는 대상에 저장된 값을 변경하는 연산은 문제가 되지 않는다.

//const선언을 많이 하면 그만큼 프로그램 코드의 안전성은 높아진다.
//PI값처럼 변경하지/되지 않아야하는 수를 다룰 때 유용하게 사용된다.
