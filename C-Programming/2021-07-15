1차원 배열

1차원 배열의 선언에 필요한 세 가지: 배열이름, 자료형, 길이정보

예) int OneDimArr[4]
    int         배열을 이루는 요소(변수)의 자료형
    oneDimArr   배열의 이름
    [4]         배열의 길이
    
배열=나란히 선언되어 있는 변수
** 배열의 길이 정보는 상수로 저장한다.(범용적인 컴파일을 위해서)

<선언된 1차원 배열의 접근>
예)  arr[0]=10;    //배열 arr의 첫 번째 요소에 10을 저장하라.

** 배열의 위치 정보를 명시하는 인덱스 값은 1이 아닌 0에서부터 시작한다.
** 배열의 모든 요소는 반복문을 이용해서 순차적으로 접근하는 것이 가능하다.

*** 배열의 길이가 3인 배열이 4번째 요소의 접근을 시도한다면 문제가 생기는데 이는 컴파일러가 배열접근에 있어서 유효성 검사를 진행하지 않기
    때문에 이러한 경우에도 컴파일 에러를 일으키지 않는다. 그래서 신중하게 확인하고 주의해야 한다.
    
<배열, 선언과 동시에 초기화하기>

int arr1[5]={1, 2, 3, 4, 5}   //순차적으로 1, 2, 3, 4, 5로 초기화 함
int arr1[]={1, 2, 3, 4, 5}    //길이를 생략하는 것도 가능하다
//중괄호로 묶인 부분을 초기화 리스트라고 한다.
//배열의 길이보다 적제 리스트가 적성되면 작성되지 않은 부분은 모두 0으로 자동적으로 저장된다.


<배열을 이용한 문자열 변수의 표현>
char형 배열을 이용하면 문자열의 저장뿐만 아니라 문자열의 변경도 가능해진다. 변수형태의 문자열 선언이 가능해진다.
**문자열의 저장을 목적으로 char형 배열을 선언할 경우에는 특수문자 '\0'이 저장될 공간까지 고려해서 배열의 길이를 결정해야 한다.

예제를 통한 널(null) 출력 여부 확인하기.

#include <stdio.h>

int main(void)
{
  char str[]="Good Morning!";
  printf("배열 str의 크기: %d \n", sizeof(str));
  printf("널 문자 문자형 출력: %c \n", str[13]);
  printf("널 문자 정수형 출력: %d \n", str[13]);
  
  str[12]='?';    //배열 str에 저장된 문자열 데이터는 변경 가능!
  printf("문자열 출력: %s \n", str);
  return 0;
}

실행결과
배열 str의 크기:14
널 문자 문자형 출력:
널 문자 정수형 출력:0
문자열 출력: Good Morning?

**널 문자의 아스키 코드 값은 0이다. 그리고 이를 문자의 형태로 출력할 경우, 아무런 출력이 발생하지 않는다.

<scanf 함수를 이용한 문자열의 입력>

** str앞에는 & 연산자를 삽입하지 않는다. scanf 함수 호출문 구성 시, 데이터를 저장할 변수의 이름 앞에는 &연산자를 붙여줘야 한다. 그러나 문자열을 입력 받는 배열의 이름
   앞에는 & 연산자를 붙이지 않는다.
   
** C 언어에서 표현하는 모든 문자열의 끝에는 널 문자가 자동으로 삽입된다.
* 널 문자가 존재하면 문자열이고 존재하지 않으면 문자열이 아니다.
* 이렇듯 문자열의 판단여부에 있어서 선언방법은 중요하지 않다. 어떻게 선언이 되든 널 문자가 마지막에 존재하면 이는 C언어의 관점에서 문자열이 되는 것이다.
* 메모리상에서 문자열은 이진 데이터로 저장되기 때문에 문자열의 시작과 끝이 표시되어 있지 않다면 문자열을 구분하는 것은 불가능하다. 그래서 널 문자를 이용해서 문자열의
  끝을 표시하는 것이다. 이 끝은 프로그래머가 직접 변경이 가능하다.
  
* 1차원은 선이고, 2차원은 면이고, 3차원은 입체라고 한다.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
문제1: 프로그램 사용자로부터 하나의 영단어를 입력 받아서 입력 받은 영단어의 길이를 계산하여 출력하는 프로그램을 작성해보자.

#include <stdio.h>

int main(void)
{
    char voca[100];
    int len=0;
    
    printf("영단어 입력: ");
    scanf("%s", voca);
    
    while(voca[len] !=0)
        len++;
        
    printf("입력한 영단어의 길이는 %d \n", len);
    return 0;
}    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
