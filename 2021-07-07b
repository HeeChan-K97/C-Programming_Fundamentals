while/do~while/for문에 대한 이해
----------------------------------------------------------------------------------------------------------------------------------------------------------------

1. while 문
:while 문은 반복을 명령하는 문장이다.
:while문에는 어떠한 반복을 명령하는 조건이 부여되고 또 그 반복조건을 무너뜨리기 위한 연산이 존재한다. 만약 반복을 멈추는 연산이 존재하지 않는다면 무한루프가 생성된다.
따라서 반복문의 구성에 있어서 중요한 것은, 반복의 조건을 무너뜨리기 위한 최소한의 연산이다.

**반복의 대상이 하나의 문장이라면 중괄호는 생략 가능하다.
**while문의 반복조건이 '1'이라면 무한 루프가 생성, 1은 참을 의미한다.

<while문의 구성과 실행흐름>
:while문에 처음 진입하면, 제일먼저 반복의 조건으로 등장한 비교연산을 진행한다. 그리고 그 결과로 '참'이 반환되면 반복영역을 실행하고, 다시 조건검사를 위한 위치로 이동한다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

2. do~while 문
:do~while문은 while문과 마찬가지로 반복문을 뜻한다. 두 반복문의 차이점은 반복의 조건을 검사하는 시점에 있다.
:while문과 달리 do~while문은 최소한 한번 반복영역을 실행하는 구조이다.

<do~while문의 구성과 실행흐름>
:반복영역을 최소 한번 실행, 그 후 반복문의 반복조건이 참인지를 판단하여 반복할지 빠져나올지 정해진다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

3. for 문
:위에 반복문과는 반대로 반복을 위한 변수의 선언과 반복조건을 거짓으로 만들기 위한 값의 증가 및 감소연산 등을 한데 묶을 수 있도록 만들어진 반복문이다.
:for 문에는 필수요소가 3가지 존재한다.
  - 요소1: 초기식/반복을 위한 변수의 선언 및 초기화에 사용
  - 요소2: 조건식/반복의 조건을 검사하는 목적으로 선언됨
  - 요소3: 증감식/반복의 조건을 거짓으로 만드는 증가 및 감소연산
  
for(초기식 ; 조건식 ; 증감식)
{
    //반복의 대상이 되는 문장들
}

** 반복횟수가 정해진 경우라면 세가지의 반복문중 for 문을 사용하는 것이 최선이다.
** for( ; ; )   //for문의 중간에 위치한 조건식이 비워지면 무조건 참으로 인식이 되어 무한루프를 형성 한다.
